const sqlite3 = require('sqlite3').verbose();

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./office_tracking.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
function isWorkingDay(dateStr) {
  const date = new Date(dateStr);
  const day = date.getDay();
  return day >= 1 && day <= 5; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
function updateWorkDayActualTime(employeeId, dateStr, totalMinutes = 0) {
  return new Promise((resolve, reject) => {
    const getQuery = 'SELECT * FROM work_days WHERE employee_id = ? AND date = ?';
    db.get(getQuery, [employeeId, dateStr], (err, workDay) => {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è:', err);
        reject(err);
        return;
      }
      
      if (!workDay) {
        console.log(`–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω: Employee ${employeeId}, Date: ${dateStr}`);
        resolve(0);
        return;
      }

      const sessionsQuery = `
        SELECT start_time, end_time, is_active
        FROM office_sessions 
        WHERE employee_id = ? AND DATE(start_time) = ?
        ORDER BY start_time ASC
      `;
      
      db.all(sessionsQuery, [employeeId, dateStr], (err, sessions) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', err);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ fallback
          const now = new Date();
          const startTime = new Date(now.getTime() - totalMinutes * 60000);
          updateWorkDayRecord(workDay, startTime.toISOString(), now.toISOString(), totalMinutes, employeeId, dateStr, resolve, reject);
          return;
        }

        let actualStartTime = null;
        let actualEndTime = null;
        
        if (sessions.length > 0) {
          actualStartTime = sessions[0].start_time;
          const lastSession = sessions[sessions.length - 1];
          if (lastSession.end_time) {
            actualEndTime = lastSession.end_time;
          } else if (lastSession.is_active) {
            actualEndTime = new Date().toISOString();
          }
        } else if (totalMinutes > 0) {
          const now = new Date();
          const startTime = new Date(now.getTime() - totalMinutes * 60000);
          actualStartTime = startTime.toISOString();
          actualEndTime = now.toISOString();
        }
        
        updateWorkDayRecord(workDay, actualStartTime, actualEndTime, totalMinutes, employeeId, dateStr, resolve, reject);
      });
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
function updateWorkDayRecord(workDay, actualStartTime, actualEndTime, totalMinutes, employeeId, dateStr, resolve, reject) {
  let isLate = false;
  let isEarlyLeave = false;
  let lateMinutes = 0;
  let earlyLeaveMinutes = 0;
  let isPresent = totalMinutes > 0;
  
  if (actualStartTime && workDay.work_start_time) {
    const workStart = new Date(workDay.work_start_time);
    const actualStart = new Date(actualStartTime);
    if (actualStart > workStart) {
      isLate = true;
      lateMinutes = Math.round((actualStart - workStart) / 1000 / 60);
    }
  }
  
  if (actualEndTime && workDay.work_end_time) {
    const workEnd = new Date(workDay.work_end_time);
    const actualEnd = new Date(actualEndTime);
    if (actualEnd < workEnd) {
      isEarlyLeave = true;
      earlyLeaveMinutes = Math.round((workEnd - actualEnd) / 1000 / 60);
    }
  }
  
  const updateQuery = `
    UPDATE work_days SET 
      actual_start_time = ?, actual_end_time = ?, total_minutes = ?, is_present = ?,
      is_late = ?, is_early_leave = ?, late_minutes = ?, early_leave_minutes = ?,
      updated_at = datetime('now')
    WHERE employee_id = ? AND date = ?
  `;
  
  db.run(updateQuery, [
    actualStartTime, actualEndTime, totalMinutes, isPresent ? 1 : 0,
    isLate ? 1 : 0, isEarlyLeave ? 1 : 0, lateMinutes, earlyLeaveMinutes,
    employeeId, dateStr
  ], function(err) {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è:', err);
      reject(err);
    } else {
      console.log(`–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω: Employee ${employeeId}, Date: ${dateStr}, Present: ${isPresent}, Late: ${isLate}, Early: ${isEarlyLeave}`);
      resolve(this.changes);
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function updateAllWorkDays() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π...');
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const employees = await new Promise((resolve, reject) => {
    db.all('SELECT id FROM employees', (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏
  const workDays = await new Promise((resolve, reject) => {
    db.all('SELECT employee_id, date FROM work_days', (err, rows) => {
      if (err) reject(err);
      else resolve(rows);
    });
  });
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${workDays.length} —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
  for (const workDay of workDays) {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
    const stats = await new Promise((resolve, reject) => {
      db.get(
        'SELECT total_minutes FROM daily_stats WHERE employee_id = ? AND date = ?',
        [workDay.employee_id, workDay.date],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });
    
    const totalMinutes = stats ? stats.total_minutes : 0;
    await updateWorkDayActualTime(workDay.employee_id, workDay.date, totalMinutes);
  }
  
  console.log('‚úÖ –í—Å–µ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  for (const employee of employees) {
    const stats = await new Promise((resolve, reject) => {
      db.all(
        'SELECT COUNT(*) as total, SUM(CASE WHEN is_present = 1 THEN 1 ELSE 0 END) as present, SUM(CASE WHEN is_late = 1 THEN 1 ELSE 0 END) as late, SUM(CASE WHEN is_early_leave = 1 THEN 1 ELSE 0 END) as early FROM work_days WHERE employee_id = ?',
        [employee.id],
        (err, rows) => {
          if (err) reject(err);
          else resolve(rows[0]);
        }
      );
    });
    
    console.log(`üë§ Employee ${employee.id}: ${stats.present}/${stats.total} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª, ${stats.late} –æ–ø–æ–∑–¥–∞–Ω–∏–π, ${stats.early} —Ä–∞–Ω–Ω–∏—Ö —É—Ö–æ–¥–æ–≤`);
  }
  
  db.close();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
updateAllWorkDays().catch(console.error);
