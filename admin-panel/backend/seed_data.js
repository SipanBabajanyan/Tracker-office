const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./office_tracking.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
function getRandomMinutes(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
function getRandomTimeInOffice() {
  const startHour = Math.floor(Math.random() * 3) + 8; // 8-10 —É—Ç—Ä–∞
  const startMinute = Math.floor(Math.random() * 60);
  const duration = getRandomMinutes(240, 600); // 4-10 —á–∞—Å–æ–≤
  
  const startTime = new Date();
  startTime.setHours(startHour, startMinute, 0, 0);
  
  const endTime = new Date(startTime.getTime() + duration * 60000);
  
  return {
    start: startTime.toISOString(),
    end: endTime.toISOString(),
    minutes: duration
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å
function generateDayData(employeeId, date) {
  const sessions = [];
  const timeInOffice = getRandomTimeInOffice();
  
  // 80% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±—ã–ª –≤ –æ—Ñ–∏—Å–µ
  if (Math.random() < 0.8) {
    sessions.push({
      employee_id: employeeId,
      start_time: timeInOffice.start,
      end_time: timeInOffice.end,
      is_active: 0,
      total_minutes: timeInOffice.minutes
    });
  }
  
  return sessions;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function seedDatabase() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  
  // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
  await new Promise((resolve, reject) => {
    db.serialize(() => {
      db.run('DELETE FROM daily_stats', (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
  });
  
  await new Promise((resolve, reject) => {
    db.serialize(() => {
      db.run('DELETE FROM office_sessions', (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
  });
  
  await new Promise((resolve, reject) => {
    db.serialize(() => {
      db.run('DELETE FROM employees', (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
  const employees = [
    { name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ü–µ—Ç—Ä–æ–≤', device_id: 'device_001', target_hours: 8 },
    { name: '–ú–∞—Ä–∏—è –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞', device_id: 'device_002', target_hours: 7 }
  ];
  
  const employeeIds = [];
  
  for (const emp of employees) {
    await new Promise((resolve, reject) => {
      db.run(
        'INSERT INTO employees (name, device_id, target_hours_per_day) VALUES (?, ?, ?)',
        [emp.name, emp.device_id, emp.target_hours],
        function(err) {
          if (err) reject(err);
          else {
            employeeIds.push(this.lastID);
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫: ${emp.name} (ID: ${this.lastID})`);
            resolve();
          }
        }
      );
    });
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
  const startDate = new Date();
  startDate.setMonth(startDate.getMonth() - 3);
  
  const endDate = new Date();
  
  console.log('üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞...');
  
  for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
    const currentDate = new Date(d);
    const dateStr = currentDate.toISOString().split('T')[0];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    if (currentDate.getDay() === 0 || currentDate.getDay() === 6) {
      continue;
    }
    
    for (let i = 0; i < employeeIds.length; i++) {
      const employeeId = employeeIds[i];
      const sessions = generateDayData(employeeId, currentDate);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–∏
      for (const session of sessions) {
        await new Promise((resolve, reject) => {
          db.run(
            'INSERT INTO office_sessions (employee_id, start_time, end_time, is_active) VALUES (?, ?, ?, ?)',
            [session.employee_id, session.start_time, session.end_time, session.is_active],
            (err) => {
              if (err) reject(err);
              else resolve();
            }
          );
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
      const totalMinutes = sessions.reduce((sum, s) => sum + s.total_minutes, 0);
      await new Promise((resolve, reject) => {
        db.run(
          'INSERT INTO daily_stats (employee_id, date, total_minutes, sessions_count) VALUES (?, ?, ?, ?)',
          [employeeId, dateStr, totalMinutes, sessions.length],
          (err) => {
            if (err) reject(err);
            else resolve();
          }
        );
      });
    }
  }
  
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
  console.log(`üìä –î–æ–±–∞–≤–ª–µ–Ω–æ ${employeeIds.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
  console.log('üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ (—Ä–∞–±–æ—á–∏–µ –¥–Ω–∏)');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  for (let i = 0; i < employeeIds.length; i++) {
    const employeeId = employeeIds[i];
    const emp = employees[i];
    
    await new Promise((resolve, reject) => {
      db.get(
        'SELECT COUNT(*) as days, SUM(total_minutes) as total_minutes FROM daily_stats WHERE employee_id = ?',
        [employeeId],
        (err, row) => {
          if (err) reject(err);
          else {
            const avgHours = (row.total_minutes / 60 / row.days).toFixed(1);
            console.log(`üë§ ${emp.name}: ${row.days} –¥–Ω–µ–π, ${(row.total_minutes / 60).toFixed(1)}—á –æ–±—â–µ–µ –≤—Ä–µ–º—è, ${avgHours}—á –≤ —Å—Ä–µ–¥–Ω–µ–º`);
            resolve();
          }
        }
      );
    });
  }
  
  db.close();
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
seedDatabase().catch(console.error);
